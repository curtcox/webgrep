#!/usr/bin/env groovy
@Grab( 'commons-lang:commons-lang:2.6' )
import static org.apache.commons.lang.StringEscapeUtils.escapeHtml

terms = args.findAll { it.length() > 2 }
File dir = new File(".")

@groovy.transform.Immutable class Hits {
    List matches
    int score
}

@groovy.transform.Immutable class Match {
    String term
    String context
    int index
    static String highlight(String word) { "<b style=\"color:green; font-size:20px;\">$word</b>" }
    def toHtml() {
      String highlighted = highlight(term)
      escapeHtml(context).replaceAll(term,highlighted)
    }
}


List matchIndices(String target, String text) {
  List<String> list = new ArrayList()
  int at = 0
  while((at = text.indexOf(target, at)) != -1) {
     list.add(at)
     at += target.length() - 1
  }
  list
}

int scoreFor(File f) {
    int score = 0
    String text = f.text.toLowerCase()
    terms.forEach( term -> {
        String target = term.toLowerCase()
        if (text.contains(target)) {
            score = score + 10000 + matchIndices(target,text).size()
        }
    })
    score
}

List matchesFor(File f) {
    List<String> list = new ArrayList()
    String text = f.text.toLowerCase()
    terms.forEach( term -> {
        String target = term.toLowerCase()
        if (text.contains(target)) {
            for (i : matchIndices(target,text)) {
                list.add(matchFor(term,text,i))
            }
        }
    })
    list
}

Match matchFor(String term, String text, int at) {
    int start = at - 100
    int end   = at + 100
    if (start < 0) start = 0
    if (end   > text.length()) end = text.length()
    String context = text.substring(start,end)
    new Match(term,context,start)
}

void updateCounts(Map counts, Hits hits) {
   for(match in hits.matches) {
       String term = match.term
       if (counts.containsKey(term)) {
           counts.put(term,counts.get(term) + 1)
       } else {
           counts.put(term,1)
       }
   }

}

List<File> listFiles(File dir) { dir.listFiles().findAll { it.isFile() } }

Hits hitsFor(File f) {
    new Hits(matches:matchesFor(f), score:scoreFor(f))
}

Map<String,Integer> counts = new HashMap<>()
Map<File,Hits> allHits = new HashMap<>()

listFiles(dir).forEach(f -> {
    Hits hits = hitsFor(f)
    allHits.put(f,hits)
    updateCounts(counts,hits)
})

allHits = allHits.sort {a, b -> b.value.score <=> a.value.score}

counts.each {
    term, count -> println "${Match.highlight(term)} $count"
}

println "</br>"

allHits.each {
    file, hits -> {
      println "$file"
      hits.matches.forEach( match -> {
         println "${match.toHtml()} </br>"
      })
    }
}
